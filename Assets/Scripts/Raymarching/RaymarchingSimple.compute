// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
Texture2D<float4> _SkyboxTexture;
float4 _DirectionalLight;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
static const float Kd = 0.3f;	// Diffuse coefficient
float2 _PixelOffset;
float3 camera_position;
float3 _Albedo;
static const int NUMBER_OF_STEPS = 64;
static const float MIN_HIT_DISTANE = 0.001f;	// epsilon
static const float MAX_MARCH_DISTANCE = 100.0f;
int _NumberOfReflections;
float4 _Sphere;
float3 _Ground;
float3 _GroundScale;
float3 _Box;
float3 _BoxScale;
float3 _Prism;
float2 _PrismSize;
float3 _Torus;
float2 _TorusSize;
bool _SmoothBlend = false;
float _BlendCoefficient = 0.0f;

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);	// The ray starts with full throughput on all color channels, and will diminish with each reflection.
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 0.0f)).xyz;
	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;	// Note: uv is 2 dimensional
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(1.0f, 1.0f, 1.0f);
	return hit;
}

float smooth_min(float dst_A, float dst_B, float k) 
{
	float h = max(k - abs(dst_A - dst_B), 0) / k;
	return min(dst_A, dst_B) - h * h * h * k * 1 / 6.0;
}

float3 SDF_sphere(float3 eye)
{
	float3 center = _Sphere.xyz;
	float radius = _Sphere.w;
	return distance(eye, center) - radius;
}

float3 SDF_ground_plane(float3 eye)
{
	float3 center = _Ground;
	float3 size = _GroundScale;
	float3 o = abs(eye - center) - size;
	float ud = length(max(o, 0));
	float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
	return ud + n;
}

float3 SDF_box(float3 eye)
{
	float3 center = _Box;
	float3 size = _BoxScale;
	float3 o = abs(eye - center) - size;
	float ud = length(max(o, 0));
	float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
	return ud + n;
}

float SDF_torus(float3 eye)
{
	float3 center = _Torus;
	float r1 = _TorusSize.x;
	float r2 = _TorusSize.y;
	float2 q = float2(length((eye - center).xz) - r1, eye.y - center.y);
	return length(q) - r2;
}

float3 SDF_prism(float3 eye)
{
	float3 center = _Prism;
	float2 h = _PrismSize;
	float3 p = eye - center;
	float3 q = abs(p);
	return max(q.z - h.y, max(q.x*0.866025f + p.y*0.5f, -p.y) - h.x*0.5f);
}

float3 SDF(float3 eye)
{
	float3 dst_ground = SDF_ground_plane(eye);
	float3 dst_sphere = SDF_sphere(eye);
	float3 dst_box = SDF_box(eye);
	float3 dst_torus = SDF_torus(eye);
	float3 dst_prism = SDF_prism(eye);

	if (_SmoothBlend)
	{
		return min(dst_ground, smooth_min(smooth_min(smooth_min(dst_sphere, dst_torus, _BlendCoefficient), dst_box, _BlendCoefficient), dst_prism, _BlendCoefficient));
	}
	else 
	{
		return min(dst_ground, min(min(min(dst_sphere, dst_torus), dst_box), dst_prism));
	}
}

float3 EstimateNormal(float3 p) 
{
	float x = SDF(float3(p.x + MIN_HIT_DISTANE, p.y, p.z)) - SDF(float3(p.x - MIN_HIT_DISTANE, p.y, p.z));
	float y = SDF(float3(p.x, p.y + MIN_HIT_DISTANE, p.z)) - SDF(float3(p.x, p.y - MIN_HIT_DISTANE, p.z));
	float z = SDF(float3(p.x, p.y, p.z + MIN_HIT_DISTANE)) - SDF(float3(p.x, p.y, p.z - MIN_HIT_DISTANE));
	return normalize(float3(x, y, z));
}

RayHit March(Ray ray) 
{
	float total_distance_travelled = 0.0f;

	RayHit hit = CreateRayHit();
	hit.albedo = _Albedo;
	hit.position = float3(0.0f, 0.0f, 1.0f);
	hit.position = ray.origin;
	for (int i = 0; i < NUMBER_OF_STEPS; i++)
	{
		float dst = 0.0f;
		int shape = 0;
		float dst_sphere = 0.0f;
		float dst_cube = 0.0f;

		dst = SDF(ray.origin);

		if (dst <= MIN_HIT_DISTANE)
		{
			float3 pointOnSurface = ray.origin + ray.direction * dst;
			hit.position = pointOnSurface;
			float3 normal = EstimateNormal(pointOnSurface - ray.direction * MIN_HIT_DISTANE);
			hit.normal = normal;
			hit.albedo = _Albedo;
			hit.specular = float3(0.5f, 0.5f, 0.5f);
			hit.distance = dst;
			break;
		}
		total_distance_travelled += dst;
		if (total_distance_travelled >= MAX_MARCH_DISTANCE)
		{
			break;
		}
		ray.origin += ray.direction * dst;
	}
	return hit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
	// ray hit an object in scene
	if (hit.distance < MIN_HIT_DISTANE)
	{
		// For flat shading, we directly return the color of the hit object
		//return hit.albedo;

		// Diffuse calculation
		return saturate(Kd * dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
	}
	else
	{
		// In case of no collision, we render the sky box
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.0f;
		//return float3(0.0f, 0.0f, 0.0f);
	}
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for uvs
	Ray ray = CreateCameraRay(uv);
	float3 result = float3(0.0f, 0.0f, 0.0f);

	// Reflection
	/*
	Raymarch to the hit point, then obtain the color at that point.
	Continue on from the hit point in the direction of the reflected  ray until you reach a new hit point.
	Obtain the color at the new point, then add a portion of it to your original color. Repeat the process.
	*/
	for (int i=0; i< _NumberOfReflections; i++)
	{
		RayHit hit = March(ray);
		result += ray.energy * Shade(ray, hit);
		ray.direction = normalize(reflect(ray.direction, hit.normal));
		ray.origin = hit.position + (ray.direction * 0.01f);
		ray.energy *= hit.specular;
		if (!any(ray.energy))
			break;
	}

	// March the ray
	RayHit hit = March(ray);
	result += ray.energy * Shade(ray, hit);
	Result[id.xy] = float4(result, 1);
}
